// Count frequency of each element in an array

// 1) Use of two loops

// Time Complexity: O(n log n) (due to sorting)
// Space Complexity: O(n) (for the input array)import java.util.Arrays;

public class Main
{
	
	public static void print(int arr[]){
	    
	    for(int i=0; i<= arr.length-1; i++){
	        
	        System.out.print(arr[i] +" ");
	    }
	}
	
	public static void main(String[] args) {

     //int arr[] = { 1,2,2,3,4,4,4,5,5};
    //  int arr[] = { 1,1,1,1,2,2,2,2,3,3};
      int arr[] ={1,3,1,2,3,5,3,2,4,5,7,6,4};
      
    Arrays.sort(arr);
    print(arr);
     
     for(int i=0; i<= arr.length; i++){
         
         int count=1;
         while( i+1< arr.length && arr[i] == arr[i+1] ){
             
            count++;
            i++;
         }
        
         System.out.println("count of " + arr[i] + ":" + count);
     }
     
	}
}
---------------------------------******************---------------------------
//  Using HashMap
// Time Complexity: O(N)
// Space Complexity: O(n)

import java.util.HashMap;
import java.util.Map;

public class Main
{
    
    
    public static void frequencyCount(int arr[],int n){
        
        Map<Integer,Integer> mymap = new HashMap<>();
        
        for(int i=0;i< n;i++){
            
            if(mymap.containsKey(arr[i]))
            {
                
                mymap.put(arr[i], mymap.get(arr[i])+1);
                
            }
            else
            {
                mymap.put(arr[i],1);
            }
        }
        
        
        for(Map.Entry<Integer,Integer> myprint : mymap.entrySet())
        {
            System.out.println(myprint.getKey() + " " + myprint.getValue());
        
        
        }
    }
    
	  public static void main(String[] args) {
	    
	    int arr[] = {1,2,3,2,2,1,3,3,5};
	    int n = arr.length;
	    frequencyCount(arr,n);


	}

}
